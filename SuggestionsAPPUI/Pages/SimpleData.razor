@page "/SampleData"
@using SuggestionApplibrary.Models;
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData 
@inject ISuggestionData suggestionData
<h3>SimpleData</h3>

@if (categoriesCreated)
{
    <h4>Categories has been created </h4>
}
else
{

    <button class="btn btn-primary" @onclick="CreateCategories"> Create Categories </button>
}


@if (StatusesCreated)
{
    <h4>Statuses have been created </h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateStatuses"> Create Statuses </button>
}

<button class"btn btn-danger" @onclick ="GenerateSampleData"> Generate Sample Data </button>

@code {
    private bool categoriesCreated = false;
    private bool StatusesCreated = false;

    private async Task GenerateSampleData()
    {
        UserModel user = new()
            {
                FirstName = "Tim",
                LastName = "Corey",
                EmailAddress = "tim@test.com",
                DisplayName = "Sample Yim Corey",
                ObjectIdentifier = "abc-123"
            };
        await userData.CreatUser(user);

        var foundUser = await userData.GetUserFromAuthentication("abc-123");
        var categories = await categoryData.GetAllCategories();
        var statuses = await statusData.GetAllStatuses();

        HashSet<string> votes = new();
        votes.Add("1");
        votes.Add("2");
        votes.Add("3");



        SuggestionModel suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[0],
                Suggestion = "Our first suggestion",
                Description = "This is a suggestion create y the sample data generation method."


            };
        await suggestionData.CreatSuggestion(suggestion);


        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[1],
                Suggestion = "Our Second suggestion",
                Description = "This is a suggestion created the sample data generation method.",
                SuggestionStatus = statuses[0],
                OwnerNotes = "This is the note for the status."

            };
        await suggestionData.CreatSuggestion(suggestion);



        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[2],
                Suggestion = "Our Third suggestion",
                Description = "This is a suggestion created the sample data generation method.",
                SuggestionStatus = statuses[1],
                OwnerNotes = "This is the note for the status."

            };
        await suggestionData.CreatSuggestion(suggestion);



        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[3],
                Suggestion = "Our Fouth suggestion",
                Description = "This is a suggestion created the sample data generation method.",
                SuggestionStatus = statuses[2],
                UserVotes = votes,
                OwnerNotes = "This is the note for the status."
                
            
            };
        await suggestionData.CreatSuggestion(suggestion);

        votes.Add("4");   

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[4],
                Suggestion = "Our Fifth suggestion",
                Description = "This is a suggestion created the sample data generation method.",
                SuggestionStatus = statuses[3],
                OwnerNotes = "This is the note for the status.",
                UserVotes = votes,
            };
        await suggestionData.CreatSuggestion(suggestion);

    }



    private async Task CreateCategories()
    {
        var categories = await categoryData.GetAllCategories();

        if (categories?.Count > 0)
        {
            return;
        }
        CategoryModel cat = new()
            {
                CategoryName = "Dev Questions",
                CategoryDescription = "Full paid courses."
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Dev Questions",
                CategoryDescription = "Advice on being a devevloper"
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "In-Depth Tutorial",
                CategoryDescription = "A deep-dive video on how to use a topic"
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "10-minute Training",
                CategoryDescription = "A quick \"How do i use this?\" video."
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "other",
                CategoryDescription = "Not sure which categories this fit in."
            };
        await categoryData.CreateCategory(cat);
        categoriesCreated = true;
    }

    private async Task CreateStatuses()
    {
        var statuses = await statusData.GetAllStatuses();

        if (statuses?.Count > 0)
        {
            return;
        }
        StatusModel stat = new()
            {
                StatusName = "Completed",
                StatusDescription = "The suggestion was accepted and the corresponding item was created"

            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Watching",
                StatusDescription = "The suggestion was intersting. we are watching to see how much interest"

            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Upcoming",
                StatusDescription = "The suggestion was accepted and it will be released soon"
            };
        await statusData.CreateStatus(stat);

        stat = new()
              {
                StatusName = "Dismissed",
                StatusDescription = "The suggestion was accepted and the undertake"

            };
        await statusData.CreateStatus(stat);

        StatusesCreated = true;
    }


}
