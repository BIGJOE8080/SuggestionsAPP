@page "/"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using SuggestionApplibrary.Models;
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage 

<h1>Training Suggestions </h1>
<div>
    <button> suggest</button>
</div>

<div>
    <div>@suggestions?.Count Suggestions </div>
    <div>
        <button @onclick="(() => OrderByNew(true))">New</button>
        <button @onclick="(() => OrderByNew(false))">Popular</button>
        </div>
        <div>
            <input typw="text" placeholder="Search"
                aria-label="Search box"
                @oninput="((txt) => onSearchInput((string)txt.Value))"/>
        </div>
</div>
<div>
    @if (suggestions is not null)
    {
        <Virtualize Items="@suggestions" Context="s" OverscanCount="10">
            <div>
                <div>
                    <div>@GetUpvoteTopText(s)</div>
                    <span class"oi oi-caret-top"></span>
                    <div>@GetUpvoteBottomText(s)</div>
                </div>
                <div>
                    <div @onclick"(() => OpenDerails(s))">
                    @s.Suggestion
                        </div>
                        <div>
                            <div @onclick="(() => OpenDetails(s))">
                                @s.Category?.CategoryName
                            </div>
                        </div>
                    </div>
                    <div>
                        <div>
                            @s.SuggestionStatus?.StatusName 
                        </div>
                    </div>
            </div>
        </Virtualize>
    }
</div>
<div>
    @if (categories is not null)
    {
        <div>
            <span>Category</span>
            <div @onClick "(() => onCategoryClick())">All</div>
            @foreach(var c in categories)
            {
                <div @onClick"(() => onCategoryClick(c.CategoryName))">@c.CategoryName</div>
            }

            </div>
    }

      @if (statuses is not null)
    {
        <div>
            <span>Status</span>
            <div @onClick "(() => onStatusClick())">All</div>
            @foreach(var c in statuses)
            {
                <div @onClick"(() => onStatusClick(c.StatusName))">@c.StatusName</div>
            }
            </div>
    }
</div>

@code{
    private List<BasicSuggestionModel> suggestions;
    private List<CategoryModel> categories;
    private List<StatusModel> statuses;


    private string selectedCategory = "All";
    private string selestedStatus = "All";
    private string searchText = "";
    bool isSortedByNew = true;

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategories();
        statuses = await statusData.GetAllStatuses();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterSuggestions();
            StateHasChanged();
        }
    }
    private async Task LoadFilterState()
    {

        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(selestedStatus));
        selestedStatus = stringResults.Results.Success ? stringResults.Value : "All";


        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        selestedStatus = stringResults.Results.Success ? stringResults.Value : "";


        var boolResults = await sessionStorage.GetAsync<string>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selestedStatus), selestedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);


    }

    private async Task FilterSuggestions()
    {
        var output = await  suggestionData.GetAllApprovedSuggestions();

        if (selectedCategory != " All")
        {
            output = output.Where(s => s.Category?.CategoryName == selectedCategory).ToList();
        }
        if (selestedStatus != "All")
        {
            output = output.Where(s => s.SuggestionStatus?.StatusName == selestedStatus).ToList();
        }
        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where
            (s => s.Suggestion.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
            || s.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
            ).ToList();
        }
        if (isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(s => s.UserVotes.Count)
            .ThenByDescending(s => s.DateCreated).ToList();
        }
        suggestions = output;

        await SaveFilterState();
    } 

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterSuggestions();
    }

    private async Task onSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterSuggestions();
    }

    private async Task onCategoryClick(string category = "All")
    {
        selectedCategory = category;
        await FilterSuggestions();
    }

    private async Task onStatusClick(string status = "All")
    {
        selestedStatus = status;
        await FilterSuggestions();
    }

    private string GetUpvoteTopText(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }
        else
        {
            return "Click To";
        }
    }
    private string GetUpvoteBottomText(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes?.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }
    }
    private void OpenDetails(SuggestionModel suggestion)
    {
        navManager.NavigateTo($"/Details/{suggestion.Id}");

}
}